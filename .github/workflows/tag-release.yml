name: Tag release from main.tf template_version

on:
  push:
    branches:
      - main

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  tag-release:
    name: Create release tag v<template_version>
    runs-on: ubuntu-latest
    outputs:
      create: ${{ steps.check.outputs.create }}
      tag: ${{ steps.check.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract template_version from main.tf
        id: version
        run: |
          FILE=main.tf
          if [ ! -f "$FILE" ]; then
            echo "‚ùå $FILE not found" >&2
            exit 1
          fi
          TEMPLATE_VERSION=$(sed -nE 's/^[[:space:]]*template_version[[:space:]]*=[[:space:]]*"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/p' "$FILE" | head -n1)
          if [ -z "$TEMPLATE_VERSION" ]; then
            echo "‚ùå Failed to parse template_version from main.tf" >&2
            exit 1
          fi
          echo "value=$TEMPLATE_VERSION" >> "$GITHUB_OUTPUT"
          echo "Parsed template_version: $TEMPLATE_VERSION"

      - name: Check if tag already exists and validate bump
        id: check
        run: |
          VER='${{ steps.version.outputs.value }}'
          TAG="v$VER"
          echo "Proposed tag: $TAG"

          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "Tag $TAG already exists; nothing to do."
            echo "create=no" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          LATEST_TAG=$(git tag --list | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sed 's/^v//' | sort -V | tail -n1 || true)
          echo "üè∑Latest existing tag (no v): ${LATEST_TAG:-none}"

          if [ -n "$LATEST_TAG" ]; then
            # Compare the template_version and latest tag (using sort -V for semantic versioning)
            HIGHEST=$(printf '%s\n%s\n' "$LATEST_TAG" "$VER" | sort -V | tail -n1)
            if [ "$HIGHEST" != "$VER" ]; then
              echo "template_version ($VER) is not greater than the latest tag ($LATEST_TAG); skipping tag creation." >&2
              echo "create=no" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          echo "create=yes" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        if: steps.check.outputs.create == 'yes'
        run: |
          VER='${{ steps.version.outputs.value }}'
          TAG="v$VER"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
          echo "üè∑Ô∏èCreated and pushed tagÔ∏è $TAG"


  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: tag-release
    if: needs.tag-release.outputs.create == 'yes'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag-release.outputs.tag }}
          name: Release ${{ needs.tag-release.outputs.tag }}
          generate_release_notes: true
